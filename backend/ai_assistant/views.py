import os
import json
import requests
import google.generativeai as genai

from dotenv import load_dotenv

from django.conf import settings
from django.core.mail import send_mail
from django.http import JsonResponse
from django.shortcuts import get_object_or_404
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.hashers import make_password
from django.contrib.auth.models import User

from rest_framework import generics, permissions
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework.parsers import MultiPartParser, FormParser
from rest_framework_simplejwt.views import TokenObtainPairView
from rest_framework_simplejwt.serializers import TokenObtainPairSerializer
from rest_framework.decorators import api_view, permission_classes

from .models import Profile, Task, Project, Feedback
from .serializers import ProfileSerializer

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API Gemini
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))
model = genai.GenerativeModel("gemini-1.5-pro")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": text}
    try:
        requests.post(url, data=data)
    except Exception as e:
        print("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ Telegram:", e)

# === AI ===
@csrf_exempt
def ai_help(request):
    if request.method == 'GET':
        return JsonResponse({"status": "ok"})

    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            task_text = data.get("task", "")
            if not task_text:
                return JsonResponse({"error": "–ó–∞–ø–∏—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π"}, status=400)

            response = model.generate_content(task_text)
            answer = response.text.strip()

            if request.user.is_authenticated:
                Task.objects.create(user=request.user, title=task_text, ai_response=answer)

            return JsonResponse({"response": answer})
        except Exception as e:
            return JsonResponse({"error": str(e)}, status=500)

    return JsonResponse({"error": "–ú–µ—Ç–æ–¥ –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π"}, status=405)

# === TASKS ===
@csrf_exempt
@require_http_methods(["GET"])
def get_tasks(request):
    if not request.user.is_authenticated:
        return JsonResponse({"error": "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"}, status=401)

    tasks = Task.objects.filter(user=request.user).order_by('-created_at')
    data = [
        {
            "id": task.id,
            "title": task.title,
            "ai_response": task.ai_response,
            "created_at": task.created_at.strftime("%Y-%m-%d %H:%M:%S")
        }
        for task in tasks
    ]
    return JsonResponse(data, safe=False)

@csrf_exempt
@require_http_methods(["DELETE"])
def delete_task(request, task_id):
    task = get_object_or_404(Task, id=task_id)
    if task.user == request.user:
        task.delete()
        return JsonResponse({'message': '–ó–∞–¥–∞—á—É –≤–∏–¥–∞–ª–µ–Ω–æ'})
    return JsonResponse({"error": "–ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ"}, status=403)

@csrf_exempt
@require_http_methods(["PATCH"])
def update_task(request, task_id):
    task = get_object_or_404(Task, id=task_id)
    if task.user != request.user:
        return JsonResponse({"error": "–ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ"}, status=403)

    data = json.loads(request.body)
    task.title = data.get('title', task.title)
    task.save()
    return JsonResponse({'message': '–ó–∞–¥–∞—á—É –æ–Ω–æ–≤–ª–µ–Ω–æ'})

# === PROJECTS ===
@csrf_exempt
@require_http_methods(["POST"])
def create_project(request):
    if not request.user.is_authenticated:
        return JsonResponse({"error": "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"}, status=401)

    data = json.loads(request.body)
    title = data.get("title")
    status = data.get("status", "–£ –ø—Ä–æ—Ü–µ—Å—ñ")
    category = data.get("category", "–Ü–Ω—à–µ")
    progress = data.get("progress", 0)
    deadline = data.get("deadline")

    if not title:
        return JsonResponse({"error": "–ù–∞–∑–≤–∞ –ø—Ä–æ—î–∫—Ç—É –æ–±–æ–≤'—è–∑–∫–æ–≤–∞"}, status=400)

    try:
        project = Project.objects.create(
            user=request.user,
            title=title,
            status=status,
            category=category,
            progress=progress,
            deadline=deadline
        )
        message = f"üÜï –ù–æ–≤–∏–π –ø—Ä–æ—î–∫—Ç: *{title}*\n–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}\n–°—Ç–∞—Ç—É—Å: {status}\n–ü—Ä–æ–≥—Ä–µ—Å: {progress}%"
        if deadline:
            message += f"\nüìÖ –î–µ–¥–ª–∞–π–Ω: {deadline}"
        send_telegram_message(message)
        return JsonResponse({"message": "–ü—Ä–æ—î–∫—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ", "id": project.id})
    except Exception as e:
        return JsonResponse({"error": str(e)}, status=500)

# === AUTH ===
@csrf_exempt
@require_http_methods(["POST"])
def register(request):
    data = json.loads(request.body)
    username = data.get("username")
    password = data.get("password")

    if not username or not password:
        return JsonResponse({"error": "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –ª–æ–≥—ñ–Ω —ñ –ø–∞—Ä–æ–ª—å"}, status=400)

    if User.objects.filter(username=username).exists():
        return JsonResponse({"error": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î"}, status=400)

    user = User.objects.create(username=username, password=make_password(password))
    Profile.objects.create(user=user)
    login(request, user)
    return JsonResponse({"message": "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞", "username": user.username})


#@csrf_exempt
#@require_http_methods(["POST"])
#def login_user(request):
    #    data = json.loads(request.body)
    #   username = data.get("username")
    #   password = data.get("password")

    #  user = authenticate(request, username=username, password=password)

    # if user is not None:
    #     login(request, user)
    #      return JsonResponse({"message": "–£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥", "username": user.username})
    #  else:
#      return JsonResponse({"error": "–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ"}, status=401)

#@csrf_exempt
#@require_http_methods(["POST"])
#def logout_user(request):
    #   logout(request)
#   return JsonResponse({"message": "–í–∏—Ö—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ"})

@csrf_exempt
@require_http_methods(["POST"])
def submit_feedback(request):
    try:
        data = json.loads(request.body)
        name = data.get("name", "")
        message = data.get("message", "")

        if not name or not message:
            return JsonResponse({"error": "–Ü–º'—è —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ"}, status=400)

        feedback = Feedback.objects.create(name=name, message=message)

        send_mail(
            subject=f"–ù–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥ {name}",
            message=message,
            from_email=settings.DEFAULT_FROM_EMAIL,
            recipient_list=[settings.ADMIN_EMAIL],
            fail_silently=False,
        )

        return JsonResponse({"message": "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫!"})
    except Exception as e:
        return JsonResponse({"error": str(e)}, status=500)

# === PROFILE ===
@api_view(['GET', 'PUT'])
@permission_classes([IsAuthenticated])
def profile_view(request):
    try:
        profile = request.user.profile
    except Profile.DoesNotExist:
        return Response({'error': '–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}, status=404)

    if request.method == 'GET':
        serializer = ProfileSerializer(profile)
        return Response(serializer.data)

    if request.method == 'PUT':
        serializer = ProfileSerializer(profile, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=400)

class ProfileView(APIView):
    permission_classes = [IsAuthenticated]
    parser_classes = [MultiPartParser, FormParser]

    def get(self, request):
        serializer = ProfileSerializer(request.user.profile)
        return Response(serializer.data)

    def put(self, request):
        serializer = ProfileSerializer(request.user.profile, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=400)

class CustomTokenObtainPairView(TokenObtainPairView):
    serializer_class = TokenObtainPairSerializer

    @api_view(['GET'])
    @permission_classes([IsAuthenticated])
    def get_profile(request):
        user = request.user
        return Response({
            'name': user.first_name,
            'login': user.username,
        })
